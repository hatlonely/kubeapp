name: kubeapp

include:
  - ops/nginx-ingress-controller/.ops.yaml
  - ops/kubernetes-dashboard/.ops.yaml
  - ops/kube-prometheus-stack/.ops.yaml
  - ops/nfs-subdir-external-provisioner/.ops.yaml
  - ops/kubeapps/.ops.yaml

dep:
  ops:
    type: git
    url: "https://github.com/hatlonely/ops.git"
    version: master

env:
  default:
    MONGO_PASSWORD: "{{.mongo.rootPassword}}"
    MYSQL_PASSWORD: "{{.mysql.rootPassword}}"
    KUBEAPP_PASSWORD: "{{.kubeapp.password}}"
    REDIS_PASSWORD: "{{.redis.password}}"
    ELASTICSEARCH_PASSWORD: "{{.elasticsearch.password}}"
    KIBANA_PASSWORD: "{{.kibana.password}}"
    MINIO_USERNAME: "{{.minio.username}}"
    MINIO_PASSWORD: "{{.minio.password}}"
    GRAFANA_PASSWORD: "{{.grafana.password}}"
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    DOMAIN: hatlonely.com
    DASHBOARD_HOST: k8s.dashboard.${DOMAIN}
    KUBEAPP_HOST: k8s.kubeapp.${DOMAIN}
    KIBANA_HOST: k8s.kibana.${DOMAIN}
    PHPMYADMIN_HOST: k8s.phpmyadmin.${DOMAIN}
    GRAFANA_HOST: k8s.grafana.${DOMAIN}
    JAEGER_HOST: k8s.jaeger.${DOMAIN}
    MINIO_HOST: k8s.minio.${DOMAIN}
    MINIO_CONSOLE_HOST: k8s.console.minio.${DOMAIN}
    MINIO_TLS: minio-tls
    MINIO_CONSOLE_TLS: minio-console-tls
    PHPMYADMIN_TLS: phpmyadmin-tls
    HELM_HOME: "${TMP}"
  dev:
    K8S_CONTEXT: kubernetes-admin@kubernetes
    NAMESPACE: dev
    STORAGE_CLASS: nfs-client
    SECRET_NAME: k8s-secret
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"
    HELM_HOME: "$HOME/k8s/helm"
  ali:
    K8S_CONTEXT: kubernetes-admin@kubernetes
    NAMESPACE: hatlonely
    STORAGE_CLASS: alicloud-disk-topology
    SECRET_NAME: k8s-secret
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    ELASTICSEARCH_PASSWORD: "{{.elasticsearch.password}}"
    KIBANA_PASSWORD: "{{.kibana.password}}"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"

task:
  del-master-taint:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - kubectl taint nodes hatlonely-vc66-0 "node-role.kubernetes.io/control-plane=:NoSchedule-"
      - kubectl taint nodes hatlonely-vc66-1 "node-role.kubernetes.io/control-plane=:NoSchedule-"
      - kubectl taint nodes hatlonely-vc66-2 "node-role.kubernetes.io/control-plane=:NoSchedule-"
  namespace:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - kubectl get namespaces "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create namespace "${NAMESPACE}"
      - kubectl get namespaces "monitoring" 2>/dev/null 1>&2 || kubectl create namespace "monitoring"
      - kubectl get namespaces "kubeapps" 2>/dev/null 1>&2 || kubectl create namespace "kubeapps"
      - kubectl get namespaces "kubernetes-dashboard" 2>/dev/null 1>&2 || kubectl create namespace "kubernetes-dashboard"
  pull-secret:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "${NAMESPACE}" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=${NAMESPACE}
        }
        kubectl patch serviceaccount default -n "${NAMESPACE}" -p "{\"imagePullSecrets\": [ { \"name\": \"${PULL_SECRET_NAME}\" } ] }"
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "kube-system" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=kube-system
        }
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "monitoring" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=monitoring
        }
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "kubeapps" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=kubeapps
        }
  helm-add-repo:
    step:
      - helm repo add stable https://charts.helm.sh/stable
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm repo add elastic https://helm.elastic.co
      - helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
      - helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner
      - helm repo add minio https://charts.min.io/
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo update
  mongo:
    description: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      app: mongo
      chart: bitnami/mongodb
      version: 10.23.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mongodb" 4.4.7-debian-10-r0
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" mongo-mongodb;;
          "password") kubectl get secret --namespace "${NAMESPACE}" mongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode; echo
        esac
  redis:
    description: https://github.com/bitnami/charts/tree/master/bitnami/redis
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "image", "install", "delete", "upgrade", "status", "password"]
    const:
      app: redis
      chart: bitnami/redis
      version: 17.1.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "redis" 7.0.4-debian-11-r11
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "redis-exporter" 1.43.0-debian-11-r18
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "redis-sentinel" 7.0.4-debian-11-r8
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" redis-data-redis-master-0
            kubectl delete pvc -n "${NAMESPACE}" redis-data-redis-slave-0
            kubectl delete pvc -n "${NAMESPACE}" redis-data-redis-slave-1
            ;;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.redis-password}" | base64 --decode; echo
        esac
  redis-cluster:
    description: https://github.com/bitnami/charts/tree/master/bitnami/redis-cluster
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "password"]
    const:
      app: redis-cluster
      chart: bitnami/redis-cluster
      version: 6.2.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.redis-password}" | base64 --decode; echo
        esac
  mysql:
    description: https://github.com/bitnami/charts/tree/master/bitnami/mysql
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      app: mysql
      chart: bitnami/mysql
      version: 8.7.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mysql" 8.0.25-debian-10-r37
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" data-mysql-0
            ;;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo
        esac
  phpmyadmin:
    description: https://github.com/bitnami/charts/tree/master/bitnami/phpmyadmin
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "image", "install", "delete", "upgrade", "status", "password"]
    const:
      app: phpmyadmin
      chart: bitnami/phpmyadmin
      version: 8.2.10
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "phpmyadmin" 5.1.1-debian-10-r20
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo
        esac
  kibana:
    description: https://github.com/elastic/helm-charts/tree/master/kibana
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "password", "values", "image"]
    const:
      SECRET_NAME: kibana-tls
      app: kibana
      chart: elastic/kibana
      version: 7.15.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "values") curl https://raw.githubusercontent.com/elastic/helm-charts/v${version}/${app}/values.yaml -o ops/${app}/values.yaml;;
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.elastic.co" "kibana" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kibana" "${version}"
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl get secret kibana -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic kibana -n "${NAMESPACE}" --from-literal=encryptionkey="${KIBANA_PASSWORD}"
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete secret -n "${NAMESPACE}" kibana
            ;;
        esac
  etcd-operator:
    description: |
      https://github.com/helm/charts/tree/master/stable/etcd-operator
      https://github.com/coreos/etcd-operator/blob/master/doc/user/install_guide.md
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "status", "upgrade"]
    const:
      NAMESPACE: kube-system
      app: etcd-operator
      chart: stable/etcd-operator
      version: 0.11.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "coreos" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "etcd" v3.2.25
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "coreos" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "etcd-operator" v0.9.4
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  etcd-cluster:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade"]
    const:
      app: etcd-cluster
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${TMP}/${app}/helm" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${TMP}/${app}/helm" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${TMP}/${app}/helm" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  etcd:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade"]
    const:
      app: etcd
      chart: bitnami/etcd
      version: 8.3.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image") sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "etcd" 3.5.4-debian-11-r8;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  jaeger:
    description: https://github.com/jaegertracing/helm-charts/tree/main/charts/jaeger
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      NAMESPACE: monitoring
      app: jaeger
      chart: jaegertracing/jaeger
      version: 0.46.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "library" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cassandra" 3.11.6
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" mongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode; echo
        esac
  minio:
    description: |
      https://github.com/minio/minio/tree/master/helm/minio
      https://docs.min.io/docs/minio-client-quickstart-guide.html
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "image", "password"]
    const:
      app: minio
      chart: minio/minio
      version: 3.3.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "minio" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mc" "RELEASE.2021-11-16T20-37-36Z"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "minio" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "minio" "RELEASE.2021-11-24T23-19-33Z"
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc export-minio-0 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-1 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-2 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-3 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-4 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-5 -n "${NAMESPACE}"
            ;;
        esac
  cert-manager:
    description: |
      https://github.com/jetstack/cert-manager/tree/v1.6.1/deploy/charts/cert-manager
      https://artifacthub.io/packages/helm/cert-manager/cert-manager
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "image", "values", "crds"]
    const:
      NAMESPACE: kube-system
      app: cert-manager
      chart: jetstack/cert-manager
      version: v1.6.1
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "values") curl https://raw.githubusercontent.com/jetstack/cert-manager/v1.6.1/deploy/charts/cert-manager/values.yaml -o ops/${app}/values.yaml;;
          "image")
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-controller" "v1.6.1"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-cainjector" "v1.6.1"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-ctl" "v1.6.1"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-webhook" "v1.6.1"
            ;;
          "crds") curl https://github.com/jetstack/cert-manager/releases/download/v1.6.1/cert-manager.crds.yaml -o ops/${app}/crds/cert-manager.crds.yaml;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl apply -f ops/${app}/crds/cert-manager.crds.yaml
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            kubectl apply -f ${TMP}/${app}/cluster-issuer.yaml
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            kubectl delete -f ${TMP}/${app}/cluster-issuer.yaml
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete -f ops/${app}/crds/cert-manager.crds.yaml
            ;;
        esac
