name: kubeapp

dep:
  ops:
    type: git
    url: "https://github.com/hatlonely/ops.git"
    version: master

env:
  dev:
    K8S_CONTEXT: home-k8s
    NAMESPACE: dev
    STORAGE_CLASS: nfs-client
    SECRET_NAME: k8s-secret
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    ELASTICSEARCH_PASSWORD: "{{.elasticsearch.password}}"
    KIBANA_HOST: k8s.kibana.hatlonely.com
    PHPMYADMIN_HOST: k8s.phpmyadmin.hatlonely.com
    GRAFANA_HOST: k8s.grafana.hatlonely.com
    KIBANA_PASSWORD: "{{.kibana.password}}"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"
  ali:
    K8S_CONTEXT: weboffice-regression
    NAMESPACE: hatlonely
    STORAGE_CLASS: alicloud-disk-topology
    SECRET_NAME: k8s-secret
    KIBANA_HOST: k8s.kibana.hatlonely.com

task:
  namespace:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - kubectl get namespaces "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create namespace "${NAMESPACE}"
  pull-secret:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "${NAMESPACE}" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=${NAMESPACE}
        }
  helm-add-repo:
    step:
      - helm repo add stable https://charts.helm.sh/stable
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm repo add elastic https://helm.elastic.co
      - helm repo add k8s-dashboard https://kubernetes.github.io/dashboard
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
  k8s-dashboard:
    description: |
      https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard/4.3.1
      https://github.com/kubernetes/dashboard/tree/master/aio/deploy/helm-chart/kubernetes-dashboard
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: k8s-dashboard
      chart: k8s-dashboard/kubernetes-dashboard
      version: 4.3.1
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password")
            ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk '{print $1}')
            DASHBOARD_LOGIN_TOKEN=$(kubectl describe secret -n kube-system ${ADMIN_SECRET} | grep -E '^token' | awk '{print $2}')
            echo ${DASHBOARD_LOGIN_TOKEN}
        esac
  mongo:
    description: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: mongo
      chart: bitnami/mongodb
      version: 10.23.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" mongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode; echo
        esac
  redis:
    description: https://github.com/bitnami/charts/tree/master/bitnami/redis
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: redis
      chart: bitnami/redis
      version: 10.8.1
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.redis-password}" | base64 --decode; echo
        esac
  redis-cluster:
    description: https://github.com/bitnami/charts/tree/master/bitnami/redis-cluster
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: redis-cluster
      chart: bitnami/redis-cluster
      version: 6.2.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.redis-password}" | base64 --decode; echo
        esac
  mysql:
    description: https://github.com/bitnami/charts/tree/master/bitnami/mysql
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: mysql
      chart: bitnami/mysql
      version: 8.7.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo
        esac
  phpmyadmin:
    description: https://github.com/bitnami/charts/tree/master/bitnami/phpmyadmin
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: phpmyadmin
      chart: bitnami/phpmyadmin
      version: 8.2.10
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo
        esac
  elasticsearch:
    description: https://github.com/elastic/helm-charts/tree/master/elasticsearch
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password", "ssl"]
    const:
      app: elasticsearch
      chart: elastic/elasticsearch
      version: 7.13.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl get secret elastic-certificates -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-certificates -n "${NAMESPACE}" --from-file=${TMP}/elasticsearch/elastic-certificates.p12
            kubectl get secret elastic-certificate-pem -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-certificate-pem -n "${NAMESPACE}" --from-file=${TMP}/elasticsearch/elastic-certificate.pem
            kubectl get secret elastic-certificate-crt -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-certificate-crt -n "${NAMESPACE}" --from-file=${TMP}/elasticsearch/elastic-certificate.crt
            kubectl get secret elastic-credentials -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-credentials -n "${NAMESPACE}" --from-literal=password="${ELASTICSEARCH_PASSWORD}" --from-literal=username=elastic
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" security-master-security-master-0
            kubectl delete pvc -n "${NAMESPACE}" security-master-security-master-1
            kubectl delete pvc -n "${NAMESPACE}" security-master-security-master-2
            kubectl delete secret -n "${NAMESPACE}" elastic-certificate-crt
            kubectl delete secret -n "${NAMESPACE}" elastic-certificate-pem
            kubectl delete secret -n "${NAMESPACE}" elastic-certificates
            kubectl delete secret -n "${NAMESPACE}" elastic-credentials
            ;;
          "ssl")
            docker rm -f elastic-helm-charts-certs || true
            mkdir -p ${TMP}/elasticsearch && cd ${TMP}/elasticsearch &&
            docker run --name elastic-helm-charts-certs -i -w /tmp docker.elastic.co/elasticsearch/elasticsearch:${version} \
              /bin/sh -c " \
                elasticsearch-certutil ca --out /tmp/elastic-stack-ca.p12 --pass '' && \
                elasticsearch-certutil cert --name security-master --dns security-master --ca /tmp/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /tmp/elastic-certificates.p12" && \
            docker cp elastic-helm-charts-certs:/tmp/elastic-certificates.p12 ./ && docker rm -f elastic-helm-charts-certs && \
            openssl pkcs12 -nodes -passin pass:'' -in elastic-certificates.p12 -out elastic-certificate.pem && \
            openssl x509 -outform der -in elastic-certificate.pem -out elastic-certificate.crt
            ;;
          "password")
            kubectl get secret -n "dev" elastic-credentials -o jsonpath="{.data.username}" | base64 -d; echo
            kubectl get secret -n "dev" elastic-credentials -o jsonpath="{.data.password}" | base64 -d; echo
            ;;
        esac
  kibana:
    description: https://github.com/elastic/helm-charts/tree/master/kibana
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password"]
    const:
      app: kibana
      chart: elastic/kibana
      version: 7.13.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl get secret kibana -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic kibana -n "${NAMESPACE}" --from-literal=encryptionkey="${KIBANA_PASSWORD}"
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete secret -n "${NAMESPACE}" kibana
            ;;
        esac
  etcd-operator:
    description: |
      https://github.com/helm/charts/tree/master/stable/etcd-operator
      https://github.com/coreos/etcd-operator/blob/master/doc/user/install_guide.md
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade"]
    const:
      app: etcd-operator
      chart: stable/etcd-operator
      version: 0.11.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  etcd-cluster:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade"]
    const:
      app: etcd-cluster
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") kubectl apply -f ${TMP}/${app}/etcd-cluster.yaml --dry-run=server -o yaml;;
          "install"|"upgrade") kubectl apply -f ${TMP}/${app}/etcd-cluster.yaml;;
          "delete") kubectl delete -f ${TMP}/${app}/etcd-cluster.yaml;;
        esac
  kube-prometheus-stack:
    description: |
      https://github.com/prometheus-operator/prometheus-operator
      https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
      https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-state-metrics
      https://github.com/grafana/helm-charts/tree/main/charts/grafana
      https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-node-exporter
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "password"]
    const:
      app: kube-prometheus-stack
      chart: prometheus-community/kube-prometheus-stack
      version: 17.0.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kube-state-metrics" 2.1.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "kiwigrid" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "k8s-sidecar" 1.12.2
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "grafana" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "grafana" 8.0.5
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "node-exporter" v1.2.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus-operator" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "prometheus-operator" v0.49.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "alertmanager" v0.22.2
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus-operator" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "prometheus-config-reloader" v0.49.0
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagerconfigs.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_probes.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
            kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete crd alertmanagerconfigs.monitoring.coreos.com
            kubectl delete crd alertmanagers.monitoring.coreos.com
            kubectl delete crd podmonitors.monitoring.coreos.com
            kubectl delete crd probes.monitoring.coreos.com
            kubectl delete crd prometheuses.monitoring.coreos.com
            kubectl delete crd prometheusrules.monitoring.coreos.com
            kubectl delete crd servicemonitors.monitoring.coreos.com
            kubectl delete crd thanosrulers.monitoring.coreos.com
            ;;
          "password")
            kubectl get secret kube-prometheus-stack-grafana -n dev -o jsonpath="{.data.admin-user}" | base64 -d; echo
            kubectl get secret kube-prometheus-stack-grafana -n dev -o jsonpath="{.data.admin-password}" | base64 -d; echo
            ;;
        esac
