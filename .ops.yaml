name: kubeapp

dep:
  ops:
    type: git
    url: "https://github.com/hatlonely/ops.git"
    version: master

env:
  default:
    MONGO_PASSWORD: "{{.mongo.rootPassword}}"
    MYSQL_PASSWORD: "{{.mysql.rootPassword}}"
    REDIS_PASSWORD: "{{.redis.password}}"
    ELASTICSEARCH_PASSWORD: "{{.elasticsearch.password}}"
    KIBANA_PASSWORD: "{{.kibana.password}}"
    MINIO_USERNAME: "{{.minio.username}}"
    MINIO_PASSWORD: "{{.minio.password}}"
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    DOMAIN: hatlonely.com
    DASHBOARD_HOST: k8s.dashboard.${DOMAIN}
    KIBANA_HOST: k8s.kibana.${DOMAIN}
    PHPMYADMIN_HOST: k8s.phpmyadmin.${DOMAIN}
    GRAFANA_HOST: k8s.grafana.${DOMAIN}
    JAEGER_HOST: k8s.jaeger.${DOMAIN}
    MINIO_HOST: k8s.minio.${DOMAIN}
    MINIO_CONSOLE_HOST: k8s.console.minio.${DOMAIN}
    MINIO_TLS: minio-tls
    MINIO_CONSOLE_TLS: minio-console-tls
    PHPMYADMIN_TLS: phpmyadmin-tls
  dev:
    K8S_CONTEXT: home-k8s
    NAMESPACE: dev
    STORAGE_CLASS: nfs-client
    SECRET_NAME: k8s-secret
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"
  ali:
    K8S_CONTEXT: weboffice-regression
    NAMESPACE: hatlonely
    STORAGE_CLASS: alicloud-disk-topology
    SECRET_NAME: k8s-secret
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    ELASTICSEARCH_PASSWORD: "{{.elasticsearch.password}}"
    KIBANA_PASSWORD: "{{.kibana.password}}"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"

task:
  del-master-taint:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - kubectl taint nodes node0 "node-role.kubernetes.io/master=:NoSchedule-"
      - kubectl taint nodes node1 "node-role.kubernetes.io/master=:NoSchedule-"
      - kubectl taint nodes node2 "node-role.kubernetes.io/master=:NoSchedule-"
  namespace:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - kubectl get namespaces "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create namespace "${NAMESPACE}"
      - kubectl get namespaces "monitoring" 2>/dev/null 1>&2 || kubectl create namespace "monitoring"
      - kubectl get namespaces "kubeapps" 2>/dev/null 1>&2 || kubectl create namespace "kubeapps"
  pull-secret:
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "${NAMESPACE}" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=${NAMESPACE}
        }
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "kube-system" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=kube-system
        }
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "monitoring" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=monitoring
        }
      - |
        kubectl get secret "${PULL_SECRET_NAME}" -n "kubeapps" 2>/dev/null 1>&2 || { \
          kubectl create secret docker-registry ${PULL_SECRET_NAME} \
            --docker-server=${REGISTRY_ENDPOINT} \
            --docker-username=${REGISTRY_USERNAME} \
            --docker-password=${REGISTRY_PASSWORD} \
            --namespace=kubeapps
        }
  helm-add-repo:
    step:
      - helm repo add stable https://charts.helm.sh/stable
      - helm repo add bitnami https://charts.bitnami.com/bitnami
      - helm repo add elastic https://helm.elastic.co
      - helm repo add k8s-dashboard https://kubernetes.github.io/dashboard
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
      - helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner
      - helm repo add minio https://charts.min.io/
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo update
  nginx-ingress-controller:
    description: https://github.com/bitnami/charts/tree/master/bitnami/nginx-ingress-controller
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      NAMESPACE: kube-system
      app: nginx-ingress-controller
      chart: bitnami/nginx-ingress-controller
      version: 9.0.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "nginx-ingress-controller" 1.0.4-debian-10-r20
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "nginx" 1.21.4-debian-10-r0
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}"
        esac
  k8s-dashboard:
    description: |
      https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard/5.0.4
      https://github.com/kubernetes/dashboard/tree/master/aio/deploy/helm-chart/kubernetes-dashboard
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      NAMESPACE: kube-system
      app: k8s-dashboard
      chart: k8s-dashboard/kubernetes-dashboard
      version: 5.0.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image") sh ${DEP}/ops/tool/image.sh sync "docker.io" "kubernetesui" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "dashboard" v2.4.0;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password")
            kubectl get sa dashboard-admin -n "${NAMESPACE}" || kubectl create sa dashboard-admin -n "${NAMESPACE}"
            kubectl get clusterrolebinding dashboard-admin || kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin
            ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk '{print $1}')
            kubectl get secret -n "${NAMESPACE}" ${ADMIN_SECRET} -o jsonpath="{.data.token}" | base64 --decode; echo
        esac
  nfs-subdir-external-provisioner:
    description: https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/charts/nfs-subdir-external-provisioner
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      NAMESPACE: kube-system
      app: nfs-subdir-external-provisioner
      chart: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
      version: 4.0.13
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "k8s.gcr.io" "sig-storage" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "nfs-subdir-external-provisioner" v4.0.2
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}"
        esac
  mongo:
    description: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      app: mongo
      chart: bitnami/mongodb
      version: 10.23.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mongodb" 4.4.7-debian-10-r0
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" mongo-mongodb;;
          "password") kubectl get secret --namespace "${NAMESPACE}" mongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode; echo
        esac
  redis:
    description: https://github.com/bitnami/charts/tree/master/bitnami/redis
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "image", "install", "delete", "upgrade", "status", "password"]
    const:
      app: redis
      chart: bitnami/redis
      version: 10.8.1
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "redis" 5.0.7-debian-10-r32
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "redis-exporter" 1.4.0-debian-10-r3
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" redis-data-redis-master-0
            kubectl delete pvc -n "${NAMESPACE}" redis-data-redis-slave-0
            kubectl delete pvc -n "${NAMESPACE}" redis-data-redis-slave-1
            ;;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.redis-password}" | base64 --decode; echo
        esac
  redis-cluster:
    description: https://github.com/bitnami/charts/tree/master/bitnami/redis-cluster
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "password"]
    const:
      app: redis-cluster
      chart: bitnami/redis-cluster
      version: 6.2.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.redis-password}" | base64 --decode; echo
        esac
  mysql:
    description: https://github.com/bitnami/charts/tree/master/bitnami/mysql
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      app: mysql
      chart: bitnami/mysql
      version: 8.7.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mysql" 8.0.25-debian-10-r37
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" data-mysql-0
            ;;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo
        esac
  phpmyadmin:
    description: https://github.com/bitnami/charts/tree/master/bitnami/phpmyadmin
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "image", "install", "delete", "upgrade", "status", "password"]
    const:
      app: phpmyadmin
      chart: bitnami/phpmyadmin
      version: 8.2.10
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "phpmyadmin" 5.1.1-debian-10-r20
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.mysql-root-password}" | base64 --decode; echo
        esac
  elasticsearch:
    description: https://github.com/elastic/helm-charts/tree/master/elasticsearch
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "password", "status", "ssl", "image", "docker", "values"]
    const:
      app: elasticsearch
      chart: elastic/elasticsearch
      version: 7.15.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "values") curl https://raw.githubusercontent.com/elastic/helm-charts/v${version}/${app}/values.yaml -o ops/${app}/values.yaml;;
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.elastic.co" "elasticsearch" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "elasticsearch" "${version}"
            ;;
          "docker")
            docker login --username="${REGISTRY_USERNAME}" --password="${REGISTRY_PASSWORD}" "${REGISTRY_ENDPOINT}"
            docker build --tag=${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/elasticsearch:${version}-hl ${TMP}/${app}/docker -f ${TMP}/${app}/docker/Dockerfile-elasticsearch
            docker push ${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/elasticsearch:${version}-hl
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl get secret elastic-certificates -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-certificates -n "${NAMESPACE}" --from-file=${TMP}/elasticsearch/elastic-certificates.p12
            kubectl get secret elastic-certificate-pem -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-certificate-pem -n "${NAMESPACE}" --from-file=${TMP}/elasticsearch/elastic-certificate.pem
            kubectl get secret elastic-certificate-crt -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-certificate-crt -n "${NAMESPACE}" --from-file=${TMP}/elasticsearch/elastic-certificate.crt
            kubectl get secret elastic-credentials -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic elastic-credentials -n "${NAMESPACE}" --from-literal=password="${ELASTICSEARCH_PASSWORD}" --from-literal=username=elastic
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc -n "${NAMESPACE}" security-master-security-master-0
            kubectl delete pvc -n "${NAMESPACE}" security-master-security-master-1
            kubectl delete pvc -n "${NAMESPACE}" security-master-security-master-2
            kubectl delete secret -n "${NAMESPACE}" elastic-certificate-crt
            kubectl delete secret -n "${NAMESPACE}" elastic-certificate-pem
            kubectl delete secret -n "${NAMESPACE}" elastic-certificates
            kubectl delete secret -n "${NAMESPACE}" elastic-credentials
            ;;
          "ssl")
            docker rm -f elastic-helm-charts-certs || true
            mkdir -p ${TMP}/elasticsearch && cd ${TMP}/elasticsearch &&
            docker run --name elastic-helm-charts-certs -i -w /tmp docker.elastic.co/elasticsearch/elasticsearch:${version} \
              /bin/sh -c " \
                elasticsearch-certutil ca --out /tmp/elastic-stack-ca.p12 --pass '' && \
                elasticsearch-certutil cert --name security-master --dns security-master --ca /tmp/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /tmp/elastic-certificates.p12" && \
            docker cp elastic-helm-charts-certs:/tmp/elastic-certificates.p12 ./ && docker rm -f elastic-helm-charts-certs && \
            openssl pkcs12 -nodes -passin pass:'' -in elastic-certificates.p12 -out elastic-certificate.pem && \
            openssl x509 -outform der -in elastic-certificate.pem -out elastic-certificate.crt
            ;;
          "password")
            kubectl get secret -n "dev" elastic-credentials -o jsonpath="{.data.username}" | base64 --decode; echo
            kubectl get secret -n "dev" elastic-credentials -o jsonpath="{.data.password}" | base64 --decode; echo
            ;;
        esac
  kibana:
    description: https://github.com/elastic/helm-charts/tree/master/kibana
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "password", "values", "image"]
    const:
      SECRET_NAME: kibana-tls
      app: kibana
      chart: elastic/kibana
      version: 7.15.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "values") curl https://raw.githubusercontent.com/elastic/helm-charts/v${version}/${app}/values.yaml -o ops/${app}/values.yaml;;
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.elastic.co" "kibana" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kibana" "${version}"
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl get secret kibana -n "${NAMESPACE}" 2>/dev/null 1>&2 || kubectl create secret generic kibana -n "${NAMESPACE}" --from-literal=encryptionkey="${KIBANA_PASSWORD}"
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete secret -n "${NAMESPACE}" kibana
            ;;
        esac
  etcd-operator:
    description: |
      https://github.com/helm/charts/tree/master/stable/etcd-operator
      https://github.com/coreos/etcd-operator/blob/master/doc/user/install_guide.md
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "status", "upgrade"]
    const:
      NAMESPACE: kube-system
      app: etcd-operator
      chart: stable/etcd-operator
      version: 0.11.2
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "coreos" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "etcd" v3.2.25
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "coreos" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "etcd-operator" v0.9.4
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  etcd-cluster:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade"]
    const:
      app: etcd-cluster
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${TMP}/${app}/helm" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${TMP}/${app}/helm" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${TMP}/${app}/helm" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  kube-prometheus-stack:
    description: |
      https://github.com/prometheus-operator/prometheus-operator
      https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
      https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-state-metrics
      https://github.com/grafana/helm-charts/tree/main/charts/grafana
      https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-node-exporter
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "crds", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      NAMESPACE: monitoring
      SECRET_NAME: grafana-tls
      app: kube-prometheus-stack
      chart: prometheus-community/kube-prometheus-stack
      version: 19.2.3
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "k8s.gcr.io" "ingress-nginx" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kube-webhook-certgen" v1.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "thanos" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "thanos" v0.17.2
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kube-state-metrics" 2.1.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "kiwigrid" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "k8s-sidecar" 1.12.2
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "grafana" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "grafana" 8.0.5
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "node-exporter" v1.2.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "prometheus" v2.28.1
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus-operator" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "prometheus-operator" v0.50.0
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "alertmanager" v0.22.2
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "prometheus-operator" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "prometheus-config-reloader" v0.50.0
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "crds")
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagerconfigs.yaml -o ops/${app}/crds/monitoring.coreos.com_alertmanagerconfigs.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml -o ops/${app}/crds/monitoring.coreos.com_alertmanagers.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml -o ops/${app}/crds/monitoring.coreos.com_podmonitors.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_probes.yaml -o ops/${app}/crds/monitoring.coreos.com_probes.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml -o ops/${app}/crds/monitoring.coreos.com_prometheuses.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml -o ops/${app}/crds/monitoring.coreos.com_prometheusrules.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml -o ops/${app}/crds/monitoring.coreos.com_servicemonitors.yaml
            curl https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.49.0/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml -o ops/${app}/crds/monitoring.coreos.com_thanosrulers.yaml
            ;;
          "install")
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_alertmanagerconfigs.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_alertmanagers.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_podmonitors.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_probes.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_prometheuses.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_prometheusrules.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_servicemonitors.yaml
            kubectl apply -f ops/${app}/crds/monitoring.coreos.com_thanosrulers.yaml
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete crd alertmanagerconfigs.monitoring.coreos.com
            kubectl delete crd alertmanagers.monitoring.coreos.com
            kubectl delete crd podmonitors.monitoring.coreos.com
            kubectl delete crd probes.monitoring.coreos.com
            kubectl delete crd prometheuses.monitoring.coreos.com
            kubectl delete crd prometheusrules.monitoring.coreos.com
            kubectl delete crd servicemonitors.monitoring.coreos.com
            kubectl delete crd thanosrulers.monitoring.coreos.com
            ;;
          "password")
            kubectl get secret kube-prometheus-stack-grafana -n "${NAMESPACE}" -o jsonpath="{.data.admin-user}" | base64 --decode; echo
            kubectl get secret kube-prometheus-stack-grafana -n "${NAMESPACE}" -o jsonpath="{.data.admin-password}" | base64 --decode; echo
            ;;
        esac
  jaeger:
    description: https://github.com/jaegertracing/helm-charts/tree/main/charts/jaeger
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status", "password"]
    const:
      NAMESPACE: monitoring
      app: jaeger
      chart: jaegertracing/jaeger
      version: 0.46.4
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "library" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cassandra" 3.11.6
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" mongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 --decode; echo
        esac
  kubeapps:
    description: https://github.com/bitnami/charts/tree/master/bitnami/kubeapps
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["image", "diff", "install", "delete", "upgrade", "status"]
    const:
      NAMESPACE: kubeapps
      app: kubeapps
      chart: bitnami/kubeapps
      version: 7.5.10
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "nginx" 1.21.3-debian-10-r50
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-dashboard" 2.4.1-debian-10-r18
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-apprepository-controller" 2.4.1-scratch-r1
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-asset-syncer" 2.4.1-scratch-r1
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-kubeops" 2.4.1-scratch-r1
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-assetsvc" 2.4.1-scratch-r1
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "oauth2-proxy" 7.2.0-debian-10-r5
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-pinniped-proxy" 2.4.1-debian-10-r21
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "kubeapps-apis" 2.4.1-debian-10-r21
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
        esac
  minio:
    description: |
      https://github.com/minio/minio/tree/master/helm/minio
      https://docs.min.io/docs/minio-client-quickstart-guide.html
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "image", "password"]
    const:
      app: minio
      chart: minio/minio
      version: 3.3.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "minio" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mc" "RELEASE.2021-11-16T20-37-36Z"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "minio" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "minio" "RELEASE.2021-11-24T23-19-33Z"
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete pvc export-minio-0 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-1 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-2 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-3 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-4 -n "${NAMESPACE}"
            kubectl delete pvc export-minio-5 -n "${NAMESPACE}"
            ;;
        esac
  cert-manager:
    description: |
      https://github.com/jetstack/cert-manager/tree/v1.6.1/deploy/charts/cert-manager
      https://artifacthub.io/packages/helm/cert-manager/cert-manager
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "delete", "upgrade", "status", "image", "values", "crds"]
    const:
      NAMESPACE: kube-system
      app: cert-manager
      chart: jetstack/cert-manager
      version: v1.6.1
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "values") curl https://raw.githubusercontent.com/jetstack/cert-manager/v1.6.1/deploy/charts/cert-manager/values.yaml -o ops/${app}/values.yaml;;
          "image")
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-controller" "v1.6.1"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-cainjector" "v1.6.1"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-ctl" "v1.6.1"
            sh ${DEP}/ops/tool/image.sh sync "quay.io" "jetstack" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "cert-manager-webhook" "v1.6.1"
            ;;
          "crds") curl https://github.com/jetstack/cert-manager/releases/download/v1.6.1/cert-manager.crds.yaml -o ops/${app}/crds/cert-manager.crds.yaml;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install")
            kubectl apply -f ops/${app}/crds/cert-manager.crds.yaml
            helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version}
            kubectl apply -f ${TMP}/${app}/cluster-issuer.yaml
            ;;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete")
            kubectl delete -f ${TMP}/${app}/cluster-issuer.yaml
            helm delete -n "${NAMESPACE}" "${app}"
            kubectl delete -f ops/${app}/crds/cert-manager.crds.yaml
            ;;
        esac
