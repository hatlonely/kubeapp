task:
  qbittorrent-exporter:
    description: |      
      ## 安装

      ops --variable .cfg/dev.yaml -a run --env dev --task qbittorrent-exporter --cmd=image
      ops --variable .cfg/dev.yaml -a run --env dev --task qbittorrent-exporter --cmd=install

      ## 设置

      1. 进入容器: `kubectl exec kube-prometheus-stack-grafana-6d5d86bf57-d4l67 -n monitoring -ti -c grafana -- sh`
      2. 安装 grafana-piechart-panel 插件 `grafana-cli plugins install grafana-piechart-panel`
      3. 添加 dashboard 15116

      ## 参考链接

      - 项目地址: <https://github.com/caseyscarborough/qbittorrent-grafana-dashboard>
      - 仓库地址: <https://hub.docker.com/r/caseyscarborough/qbittorrent-exporter>
      - grafana dashbaord 地址: <https://grafana.com/grafana/dashboards/15116-qbittorrent-dashboard/>
      - grafana piechart pannel 插件地址: <https://grafana.com/grafana/plugins/grafana-piechart-panel/>
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["pull", "diff", "image", "install", "delete", "upgrade", "status", "password"]
    const:
      app: qbittorrent-exporter
      version: 0.2.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        chart=${TMP}/${app}/helm
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "caseyscarborough" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "qbittorrent-exporter" "v1.3.2"
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.qbittorrent-password}" | base64 --decode; echo
        esac
