task:
  alist:
    description: |
      ## ops 命令

      ops --variable .cfg/dev.yaml -a run --env dev --task alist --cmd=pull
      ops --variable .cfg/dev.yaml -a run --env dev --task alist --cmd=image
      ops --variable .cfg/dev.yaml -a run --env dev --task alist --cmd=install
      ops --variable .cfg/dev.yaml -a run --env dev --task alist --cmd=password

      ## 安装

      1. 获取密码：标准输出中有打印，进入容器中执行 `./alist admin` 也可以获取
      2. alist aria2 配置：底部链接**管理** -> 左侧导航**设置** -> **其他**

      ## 参考链接

      - alist 镜像地址: <https://hub.docker.com/r/xhofe/alist>
      - alist 中文官网: <https://alist.nn.ci/zh/guide/install/script.html>
      - alist 阿里云盘配置: <https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html>
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["pull", "diff", "image", "install", "delete", "upgrade", "status", "password"]
    const:
#      SECRET_NAME: alist-tls
      app: alist
      chart: ops/alist/helm
      version: 0.2.0
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/devops/tool/render.sh ops/${app} ${TMP}/${app}
      - |
        case "${cmd}" in
          "image")
            sh ${DEP}/ops/tool/image.sh sync "docker.io" "xhofe" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "alist" "v3.17.0"
            ;;
          "diff") helm diff upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --allow-unreleased --version=${version};;
          "install") helm install -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "upgrade") helm upgrade -n "${NAMESPACE}" "${app}" "${chart}" -f "${TMP}/${app}/values-adapter.yaml" --version=${version};;
          "status") helm status -n "${NAMESPACE}" "${app}";;
          "delete") helm delete -n "${NAMESPACE}" "${app}";;
          "password") kubectl get secret --namespace "${NAMESPACE}" "${app}" -o jsonpath="{.data.alist-password}" | base64 --decode; echo
        esac
